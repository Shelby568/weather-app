{"version":3,"sources":["components/location-details.js","components/forecast-summary.js","components/forecast-summaries.js","components/forecast-details.js","components/search-form.js","components/app.js","index.jsx"],"names":["LocationDetails","props","className","city","country","ForecastSummary","data-testid","moment","date","format","temperature","description","name","iconId","icon","onClick","onSelect","ForecastSummaries","forecasts","map","forecast","key","max","onForecastSelect","ForecastDetails","min","humidity","wind","speed","direction","SearchForm","useState","searchText","setSearchText","type","value","onChange","event","target","placeholder","setLocationSearch","App","selectedDate","setSelectedDate","setForecasts","location","setLocation","useEffect","length","axios","get","then","response","data","catch","error","alert","request","console","log","message","selectedForecast","find","preventDefault","render","document","getElementById"],"mappings":"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","file":"static/js/main.d23ac7f8.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LocationDetails = props => <h1 className=\"location-details\">{props.city}, {props.country}</h1>;\n\nLocationDetails.propTypes = {\n    city: PropTypes.string.isRequired,\n    country: PropTypes.string.isRequired,\n};\n\nexport default LocationDetails;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport WeatherIcon from 'react-icons-weather';\nimport moment from 'moment';\nimport '../styles/forecast-summary.css'\n\nconst ForecastSummary = props => {\n\n    return (\n      <>\n      <div className=\"forecast-summary\">\n        <div className=\"date\" data-testid=\"date-id\">\n        <span className=\"date\">{moment(props.date).format('ddd Do MMM')}</span>\n        </div>\n        <div className=\"temperature\" data-testid=\"temperature-id\">\n          <span>{props.temperature}&deg;c</span>\n        </div>\n        <div className=\"description\" data-testid=\"description-id\">\n          {props.description}\n        </div>\n        <div className=\"icon\" data-testid=\"icon-id\">\n        <WeatherIcon name=\"owm\" iconId={props.icon} />\n        </div>\n        <button className=\"button\" onClick={() => props.onSelect(props.date)}>More Details</button>\n        </div>\n      </>\n    );\n  };\n\nForecastSummary.propTypes = {\n  forecasts: PropTypes.shape({\n    date: PropTypes.number.isRequired,\n    temperature: PropTypes.object.isRequired,\n    description: PropTypes.string.isRequired,\n    icon: PropTypes.string.isRequired,\n  })\n   \n};\n\nexport default ForecastSummary;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ForecastSummary from './forecast-summary';\nimport '../styles/forecast-summaries.css';\n\nconst ForecastSummaries = props => (\n    <div className=\"forecast-summaries\">\n        {\n            props.forecasts.map(forecast => (\n                <ForecastSummary\n                key={forecast.date}\n                date={forecast.date}\n                description={forecast.description}\n                icon={forecast.icon}\n                temperature={forecast.temperature.max}\n                onSelect={props.onForecastSelect}\n                />\n            ))\n        }\n    </div>\n);\n\nForecastSummaries.propTypes = {\n    date: PropTypes.number,\n    temperature: PropTypes.string,\n    description: PropTypes.string,\n    icon: PropTypes.string,\n}\nexport default ForecastSummaries;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport '../styles/forecast-details.css';\n\n\nconst ForecastDetails = props => (\n        <>\n        <div className=\"forecast-details\">\n        <div className=\"date\">\n        <span>{moment(props.forecast.date).format('ddd Do MMM')}</span> \n        </div>\n        <div className=\"mintemperature\">\n            Min Temperature: {props.forecast.temperature.min}&deg;c\n        </div>\n        <div className=\"maxtemperature\">\n            Max Temperature: {props.forecast.temperature.max}&deg;c\n        </div>\n        <div className=\"humidity\">\n            Humidity: {props.forecast.humidity}%\n        </div>\n        <div className=\"wind\">\n            Wind: {props.forecast.wind.speed}mph {props.forecast.wind.direction}\n        </div>\n        </div>\n        </>\n);\n\nForecastDetails.propTypes = {\n    forecast: PropTypes.shape({\n        date: PropTypes.number.isRequired,\n        temperature: PropTypes.object.isRequired,\n        humidity: PropTypes.number.isRequired,\n        wind: PropTypes.object.isRequired,\n    })\n}\n\nexport default ForecastDetails;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/search-form.css';\n\nconst SearchForm = props => {\n\n    const [searchText, setSearchText] = useState('')\n\n   const handleInputChange = (event) => {\n        setSearchText(event.target.value)\n    }\n    \n    return (\n        <form className=\"searchform\">\n            <input type=\"text\" value={searchText} onChange={handleInputChange} placeholder=\"Search for location..\" />\n            <button className=\"searchbutton\" onClick={(event) => props.setLocationSearch(event, searchText)}>Search</button>\n        </form>\n    )\n}\n\nSearchForm.propTypes = {\n    setLocationSearch: PropTypes.func.isRequired,\n}\n\nexport default SearchForm;","import React, { useState, useEffect } from 'react';\nimport LocationDetails from './location-details';\nimport ForecastSummaries from './forecast-summaries';\nimport ForecastDetails from './forecast-details';\nimport '../styles/app.css';\nimport axios from 'axios';\nimport SearchForm from './search-form';\n\nconst App = props => {\n    const [selectedDate, setSelectedDate] = useState(0);\n    const [forecasts, setForecasts] = useState([]);\n    const [location, setLocation] = useState({city: '', country: ''})\n\n    useEffect(() => {\n\n      if (forecasts.length===0) {\n      axios.get('https://mcr-codes-weather.herokuapp.com/forecast')\n      .then(response => {\n        setForecasts(response.data.forecasts);\n        setLocation(response.data.location);\n      })\n      .catch((error) => {\n        if (error.response) {\n          alert('This location does not exist')\n        } else if (error.request) {\n          alert('Oops something went wrong')\n        } else {\n          console.log(error.message)\n        }\n      })\n    }\n    });\n\n    const handleLocationSearch = (event, city) => {\n      event.preventDefault()\n\n      const request = city\n    \n      axios.get(`https://mcr-codes-weather.herokuapp.com/forecast?city=${request}`)\n      .then((response) => {\n        setForecasts(response.data.forecasts);\n        setLocation(response.data.location);\n      })\n      .catch((error) => {\n        if (error.response) {\n          alert('This location does not exist')\n        } else if (error.request) {\n          alert('Oops something went wrong')\n        } else {\n          console.log(error.message)\n        }\n      })\n    };\n\n    const selectedForecast = forecasts.find(forecast => forecast.date === selectedDate);\n    \n    const handleForecastSelect = (date) => {\n        setSelectedDate(date);\n    };\n    \n      return (\n        <div className=\"forecast\">\n        <LocationDetails\n          city={location.city}\n          country={location.country}\n        />\n        <SearchForm setLocationSearch={handleLocationSearch} />\n        <ForecastSummaries forecasts={forecasts} onForecastSelect={handleForecastSelect} />\n        \n        {selectedForecast && (<ForecastDetails forecast={selectedForecast} />)}\n\n        </div>\n      );\n  };\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './components/app';\n\n\nrender(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}